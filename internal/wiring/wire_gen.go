// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/google/wire"
	"github.com/maxuanquang/ojs/internal/app"
	"github.com/maxuanquang/ojs/internal/configs"
	"github.com/maxuanquang/ojs/internal/dataaccess"
	"github.com/maxuanquang/ojs/internal/dataaccess/cache"
	"github.com/maxuanquang/ojs/internal/dataaccess/database"
	"github.com/maxuanquang/ojs/internal/dataaccess/mq/admin"
	consumer2 "github.com/maxuanquang/ojs/internal/dataaccess/mq/consumer"
	"github.com/maxuanquang/ojs/internal/dataaccess/mq/producer"
	"github.com/maxuanquang/ojs/internal/handler"
	"github.com/maxuanquang/ojs/internal/handler/consumer"
	"github.com/maxuanquang/ojs/internal/handler/grpc"
	"github.com/maxuanquang/ojs/internal/handler/http"
	"github.com/maxuanquang/ojs/internal/handler/jobs"
	"github.com/maxuanquang/ojs/internal/logic"
	"github.com/maxuanquang/ojs/internal/utils"
)

// Injectors from wire.go:

func InitializeStandaloneServer(configFilePath configs.ConfigFilePath, appArguments utils.Arguments) (app.StandaloneServer, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return app.StandaloneServer{}, nil, err
	}
	configsGRPC := config.GRPC
	configsDatabase := config.Database
	databaseDatabase, cleanup, err := database.InitializeDB(configsDatabase)
	if err != nil {
		return app.StandaloneServer{}, nil, err
	}
	log := config.Log
	logger, cleanup2, err := utils.InitializeLogger(log)
	if err != nil {
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	accountDataAccessor := database.NewAccountDataAccessor(databaseDatabase, logger)
	accountPasswordDataAccessor := database.NewAccountPasswordDataAccessor(databaseDatabase, logger)
	auth := config.Auth
	hashLogic := logic.NewHashLogic(auth)
	tokenPublicKeyDataAccessor, err := database.NewTokenPublicKeyDataAccessor(databaseDatabase, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	configsCache := config.Cache
	client, err := cache.NewClient(configsCache, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	tokenPublicKey, err := cache.NewTokenPublicKey(client)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	tokenLogic, err := logic.NewTokenLogic(accountDataAccessor, tokenPublicKeyDataAccessor, logger, auth, tokenPublicKey)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	roleLogic := logic.NewRoleLogic(logger)
	takenAccountName, err := cache.NewTakenAccountName(client)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	accountLogic := logic.NewAccountLogic(databaseDatabase, accountDataAccessor, accountPasswordDataAccessor, hashLogic, tokenLogic, roleLogic, takenAccountName, logger)
	problemDataAccessor := database.NewProblemDataAccessor(databaseDatabase, logger)
	submissionDataAccessor := database.NewSubmissionDataAccessor(databaseDatabase, logger)
	testCaseDataAccessor := database.NewTestCaseDataAccessor(databaseDatabase, logger)
	problemLogic := logic.NewProblemLogic(logger, accountDataAccessor, problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, tokenLogic, roleLogic)
	clientClient, err := utils.InitializeDockerClient()
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	judge := config.Judge
	judgeLogic, err := logic.NewJudgeLogic(problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, clientClient, judge, appArguments, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	mq := config.MQ
	adminAdmin, err := admin.NewAdmin(logger, mq)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	producerClient, err := producer.NewClient(mq, logger, adminAdmin)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	submissionCreatedProducer, err := producer.NewSubmissionCreatedProducer(producerClient, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	submissionLogic := logic.NewSubmissionLogic(logger, accountDataAccessor, problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, tokenLogic, judgeLogic, roleLogic, submissionCreatedProducer, databaseDatabase)
	testCaseLogic := logic.NewTestCaseLogic(logger, accountDataAccessor, problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, tokenLogic, roleLogic)
	ojsServiceServer := grpc.NewHandler(accountLogic, problemLogic, submissionLogic, testCaseLogic)
	server := grpc.NewServer(configsGRPC, ojsServiceServer)
	configsHTTP := config.HTTP
	httpServer := http.NewServer(configsHTTP, configsGRPC, auth, logger)
	cron := config.Cron
	submissionCreatedHandler, err := consumer.NewSubmissionCreatedHandler(accountLogic, cron, submissionLogic, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	consumerConsumer, err := consumer2.NewConsumer(mq, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	rootConsumer := consumer.NewRootConsumer(submissionCreatedHandler, consumerConsumer, logger)
	createSystemAccountsJob, err := jobs.NewCreateSystemAccountsJob(accountLogic, cron, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	jobsCron, err := jobs.NewCron(logger, createSystemAccountsJob)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	standaloneServer, err := app.NewStandaloneServer(server, httpServer, rootConsumer, jobsCron, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	return standaloneServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InitializeHTTPServer(configFilePath configs.ConfigFilePath, appArguments utils.Arguments) (app.HTTPServer, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return app.HTTPServer{}, nil, err
	}
	configsGRPC := config.GRPC
	configsDatabase := config.Database
	databaseDatabase, cleanup, err := database.InitializeDB(configsDatabase)
	if err != nil {
		return app.HTTPServer{}, nil, err
	}
	log := config.Log
	logger, cleanup2, err := utils.InitializeLogger(log)
	if err != nil {
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	accountDataAccessor := database.NewAccountDataAccessor(databaseDatabase, logger)
	accountPasswordDataAccessor := database.NewAccountPasswordDataAccessor(databaseDatabase, logger)
	auth := config.Auth
	hashLogic := logic.NewHashLogic(auth)
	tokenPublicKeyDataAccessor, err := database.NewTokenPublicKeyDataAccessor(databaseDatabase, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	configsCache := config.Cache
	client, err := cache.NewClient(configsCache, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	tokenPublicKey, err := cache.NewTokenPublicKey(client)
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	tokenLogic, err := logic.NewTokenLogic(accountDataAccessor, tokenPublicKeyDataAccessor, logger, auth, tokenPublicKey)
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	roleLogic := logic.NewRoleLogic(logger)
	takenAccountName, err := cache.NewTakenAccountName(client)
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	accountLogic := logic.NewAccountLogic(databaseDatabase, accountDataAccessor, accountPasswordDataAccessor, hashLogic, tokenLogic, roleLogic, takenAccountName, logger)
	problemDataAccessor := database.NewProblemDataAccessor(databaseDatabase, logger)
	submissionDataAccessor := database.NewSubmissionDataAccessor(databaseDatabase, logger)
	testCaseDataAccessor := database.NewTestCaseDataAccessor(databaseDatabase, logger)
	problemLogic := logic.NewProblemLogic(logger, accountDataAccessor, problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, tokenLogic, roleLogic)
	clientClient, err := utils.InitializeDockerClient()
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	judge := config.Judge
	judgeLogic, err := logic.NewJudgeLogic(problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, clientClient, judge, appArguments, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	mq := config.MQ
	adminAdmin, err := admin.NewAdmin(logger, mq)
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	producerClient, err := producer.NewClient(mq, logger, adminAdmin)
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	submissionCreatedProducer, err := producer.NewSubmissionCreatedProducer(producerClient, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	submissionLogic := logic.NewSubmissionLogic(logger, accountDataAccessor, problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, tokenLogic, judgeLogic, roleLogic, submissionCreatedProducer, databaseDatabase)
	testCaseLogic := logic.NewTestCaseLogic(logger, accountDataAccessor, problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, tokenLogic, roleLogic)
	ojsServiceServer := grpc.NewHandler(accountLogic, problemLogic, submissionLogic, testCaseLogic)
	server := grpc.NewServer(configsGRPC, ojsServiceServer)
	configsHTTP := config.HTTP
	httpServer := http.NewServer(configsHTTP, configsGRPC, auth, logger)
	appHTTPServer, err := app.NewHTTPServer(server, httpServer, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.HTTPServer{}, nil, err
	}
	return appHTTPServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InitializeWorker(configFilePath configs.ConfigFilePath, appArguments utils.Arguments) (app.Worker, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return app.Worker{}, nil, err
	}
	configsDatabase := config.Database
	databaseDatabase, cleanup, err := database.InitializeDB(configsDatabase)
	if err != nil {
		return app.Worker{}, nil, err
	}
	log := config.Log
	logger, cleanup2, err := utils.InitializeLogger(log)
	if err != nil {
		cleanup()
		return app.Worker{}, nil, err
	}
	accountDataAccessor := database.NewAccountDataAccessor(databaseDatabase, logger)
	accountPasswordDataAccessor := database.NewAccountPasswordDataAccessor(databaseDatabase, logger)
	auth := config.Auth
	hashLogic := logic.NewHashLogic(auth)
	tokenPublicKeyDataAccessor, err := database.NewTokenPublicKeyDataAccessor(databaseDatabase, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	configsCache := config.Cache
	client, err := cache.NewClient(configsCache, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	tokenPublicKey, err := cache.NewTokenPublicKey(client)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	tokenLogic, err := logic.NewTokenLogic(accountDataAccessor, tokenPublicKeyDataAccessor, logger, auth, tokenPublicKey)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	roleLogic := logic.NewRoleLogic(logger)
	takenAccountName, err := cache.NewTakenAccountName(client)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	accountLogic := logic.NewAccountLogic(databaseDatabase, accountDataAccessor, accountPasswordDataAccessor, hashLogic, tokenLogic, roleLogic, takenAccountName, logger)
	cron := config.Cron
	problemDataAccessor := database.NewProblemDataAccessor(databaseDatabase, logger)
	submissionDataAccessor := database.NewSubmissionDataAccessor(databaseDatabase, logger)
	testCaseDataAccessor := database.NewTestCaseDataAccessor(databaseDatabase, logger)
	clientClient, err := utils.InitializeDockerClient()
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	judge := config.Judge
	judgeLogic, err := logic.NewJudgeLogic(problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, clientClient, judge, appArguments, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	mq := config.MQ
	adminAdmin, err := admin.NewAdmin(logger, mq)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	producerClient, err := producer.NewClient(mq, logger, adminAdmin)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	submissionCreatedProducer, err := producer.NewSubmissionCreatedProducer(producerClient, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	submissionLogic := logic.NewSubmissionLogic(logger, accountDataAccessor, problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, tokenLogic, judgeLogic, roleLogic, submissionCreatedProducer, databaseDatabase)
	submissionCreatedHandler, err := consumer.NewSubmissionCreatedHandler(accountLogic, cron, submissionLogic, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	consumerConsumer, err := consumer2.NewConsumer(mq, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	rootConsumer := consumer.NewRootConsumer(submissionCreatedHandler, consumerConsumer, logger)
	worker, err := app.NewWorker(rootConsumer, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Worker{}, nil, err
	}
	return worker, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InitializeCron(configFilePath configs.ConfigFilePath, appArguments utils.Arguments) (app.Cron, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return app.Cron{}, nil, err
	}
	log := config.Log
	logger, cleanup, err := utils.InitializeLogger(log)
	if err != nil {
		return app.Cron{}, nil, err
	}
	configsDatabase := config.Database
	databaseDatabase, cleanup2, err := database.InitializeDB(configsDatabase)
	if err != nil {
		cleanup()
		return app.Cron{}, nil, err
	}
	accountDataAccessor := database.NewAccountDataAccessor(databaseDatabase, logger)
	accountPasswordDataAccessor := database.NewAccountPasswordDataAccessor(databaseDatabase, logger)
	auth := config.Auth
	hashLogic := logic.NewHashLogic(auth)
	tokenPublicKeyDataAccessor, err := database.NewTokenPublicKeyDataAccessor(databaseDatabase, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Cron{}, nil, err
	}
	configsCache := config.Cache
	client, err := cache.NewClient(configsCache, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Cron{}, nil, err
	}
	tokenPublicKey, err := cache.NewTokenPublicKey(client)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Cron{}, nil, err
	}
	tokenLogic, err := logic.NewTokenLogic(accountDataAccessor, tokenPublicKeyDataAccessor, logger, auth, tokenPublicKey)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Cron{}, nil, err
	}
	roleLogic := logic.NewRoleLogic(logger)
	takenAccountName, err := cache.NewTakenAccountName(client)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Cron{}, nil, err
	}
	accountLogic := logic.NewAccountLogic(databaseDatabase, accountDataAccessor, accountPasswordDataAccessor, hashLogic, tokenLogic, roleLogic, takenAccountName, logger)
	cron := config.Cron
	createSystemAccountsJob, err := jobs.NewCreateSystemAccountsJob(accountLogic, cron, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Cron{}, nil, err
	}
	jobsCron, err := jobs.NewCron(logger, createSystemAccountsJob)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Cron{}, nil, err
	}
	appCron, err := app.NewCron(jobsCron, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.Cron{}, nil, err
	}
	return appCron, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(configs.WireSet, dataaccess.WireSet, handler.WireSet, logic.WireSet, utils.WireSet, app.WireSet)
