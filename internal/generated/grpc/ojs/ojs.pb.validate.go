// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ojs.proto

package ojs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetServerInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServerInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServerInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServerInfoRequestMultiError, or nil if none found.
func (m *GetServerInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServerInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetServerInfoRequestMultiError(errors)
	}

	return nil
}

// GetServerInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetServerInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetServerInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServerInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServerInfoRequestMultiError) AllErrors() []error { return m }

// GetServerInfoRequestValidationError is the validation error returned by
// GetServerInfoRequest.Validate if the designated constraints aren't met.
type GetServerInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServerInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServerInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServerInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServerInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServerInfoRequestValidationError) ErrorName() string {
	return "GetServerInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServerInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServerInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServerInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServerInfoRequestValidationError{}

// Validate checks the field values on GetServerInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServerInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServerInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServerInfoResponseMultiError, or nil if none found.
func (m *GetServerInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServerInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetServerInfoResponseMultiError(errors)
	}

	return nil
}

// GetServerInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetServerInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetServerInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServerInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServerInfoResponseMultiError) AllErrors() []error { return m }

// GetServerInfoResponseValidationError is the validation error returned by
// GetServerInfoResponse.Validate if the designated constraints aren't met.
type GetServerInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServerInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServerInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServerInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServerInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServerInfoResponseValidationError) ErrorName() string {
	return "GetServerInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServerInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServerInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServerInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServerInfoResponseValidationError{}

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRequestMultiError, or nil if none found.
func (m *CreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateAccountRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateAccountRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{6,32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateAccountRequest_Password_Pattern.MatchString(m.GetPassword()) {
		err := CreateAccountRequestValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{6,32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	if len(errors) > 0 {
		return CreateAccountRequestMultiError(errors)
	}

	return nil
}

// CreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequestMultiError) AllErrors() []error { return m }

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

var _CreateAccountRequest_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{6,32}$")

var _CreateAccountRequest_Password_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{6,32}$")

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccountMultiError, or nil if none found.
func (m *Account) ValidateAll() error {
	return m.validate(true)
}

func (m *Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Role

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}

	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.ValidateAll() if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountResponseMultiError, or nil if none found.
func (m *CreateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccountResponseMultiError(errors)
	}

	return nil
}

// CreateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountResponseMultiError) AllErrors() []error { return m }

// CreateAccountResponseValidationError is the validation error returned by
// CreateAccountResponse.Validate if the designated constraints aren't met.
type CreateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountResponseValidationError) ErrorName() string {
	return "CreateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountResponseValidationError{}

// Validate checks the field values on GetAccountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountRequestMultiError, or nil if none found.
func (m *GetAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAccountRequestMultiError(errors)
	}

	return nil
}

// GetAccountRequestMultiError is an error wrapping multiple validation errors
// returned by GetAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountRequestMultiError) AllErrors() []error { return m }

// GetAccountRequestValidationError is the validation error returned by
// GetAccountRequest.Validate if the designated constraints aren't met.
type GetAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountRequestValidationError) ErrorName() string {
	return "GetAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountRequestValidationError{}

// Validate checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountResponseMultiError, or nil if none found.
func (m *GetAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountResponseMultiError(errors)
	}

	return nil
}

// GetAccountResponseMultiError is an error wrapping multiple validation errors
// returned by GetAccountResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountResponseMultiError) AllErrors() []error { return m }

// GetAccountResponseValidationError is the validation error returned by
// GetAccountResponse.Validate if the designated constraints aren't met.
type GetAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountResponseValidationError) ErrorName() string {
	return "GetAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountResponseValidationError{}

// Validate checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionRequestMultiError, or nil if none found.
func (m *CreateSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateSessionRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateSessionRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{6,32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateSessionRequest_Password_Pattern.MatchString(m.GetPassword()) {
		err := CreateSessionRequestValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{6,32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateSessionRequestMultiError(errors)
	}

	return nil
}

// CreateSessionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionRequestMultiError) AllErrors() []error { return m }

// CreateSessionRequestValidationError is the validation error returned by
// CreateSessionRequest.Validate if the designated constraints aren't met.
type CreateSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionRequestValidationError) ErrorName() string {
	return "CreateSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionRequestValidationError{}

var _CreateSessionRequest_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{6,32}$")

var _CreateSessionRequest_Password_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{6,32}$")

// Validate checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionResponseMultiError, or nil if none found.
func (m *CreateSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSessionResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSessionResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSessionResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSessionResponseMultiError(errors)
	}

	return nil
}

// CreateSessionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionResponseMultiError) AllErrors() []error { return m }

// CreateSessionResponseValidationError is the validation error returned by
// CreateSessionResponse.Validate if the designated constraints aren't met.
type CreateSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionResponseValidationError) ErrorName() string {
	return "CreateSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionResponseValidationError{}

// Validate checks the field values on DeleteSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSessionRequestMultiError, or nil if none found.
func (m *DeleteSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSessionRequestMultiError(errors)
	}

	return nil
}

// DeleteSessionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSessionRequestMultiError) AllErrors() []error { return m }

// DeleteSessionRequestValidationError is the validation error returned by
// DeleteSessionRequest.Validate if the designated constraints aren't met.
type DeleteSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSessionRequestValidationError) ErrorName() string {
	return "DeleteSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSessionRequestValidationError{}

// Validate checks the field values on DeleteSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSessionResponseMultiError, or nil if none found.
func (m *DeleteSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSessionResponseMultiError(errors)
	}

	return nil
}

// DeleteSessionResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSessionResponseMultiError) AllErrors() []error { return m }

// DeleteSessionResponseValidationError is the validation error returned by
// DeleteSessionResponse.Validate if the designated constraints aren't met.
type DeleteSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSessionResponseValidationError) ErrorName() string {
	return "DeleteSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSessionResponseValidationError{}

// Validate checks the field values on CreateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProblemRequestMultiError, or nil if none found.
func (m *CreateProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for TimeLimit

	// no validation rules for MemoryLimit

	if len(errors) > 0 {
		return CreateProblemRequestMultiError(errors)
	}

	return nil
}

// CreateProblemRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProblemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProblemRequestMultiError) AllErrors() []error { return m }

// CreateProblemRequestValidationError is the validation error returned by
// CreateProblemRequest.Validate if the designated constraints aren't met.
type CreateProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProblemRequestValidationError) ErrorName() string {
	return "CreateProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProblemRequestValidationError{}

// Validate checks the field values on Problem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Problem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Problem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProblemMultiError, or nil if none found.
func (m *Problem) ValidateAll() error {
	return m.validate(true)
}

func (m *Problem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	// no validation rules for AuthorId

	// no validation rules for AuthorName

	// no validation rules for Description

	// no validation rules for TimeLimit

	// no validation rules for MemoryLimit

	if len(errors) > 0 {
		return ProblemMultiError(errors)
	}

	return nil
}

// ProblemMultiError is an error wrapping multiple validation errors returned
// by Problem.ValidateAll() if the designated constraints aren't met.
type ProblemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProblemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProblemMultiError) AllErrors() []error { return m }

// ProblemValidationError is the validation error returned by Problem.Validate
// if the designated constraints aren't met.
type ProblemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProblemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProblemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProblemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProblemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProblemValidationError) ErrorName() string { return "ProblemValidationError" }

// Error satisfies the builtin error interface
func (e ProblemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProblem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProblemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProblemValidationError{}

// Validate checks the field values on CreateProblemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProblemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProblemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProblemResponseMultiError, or nil if none found.
func (m *CreateProblemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProblemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProblem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProblemResponseValidationError{
					field:  "Problem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProblemResponseValidationError{
					field:  "Problem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProblem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProblemResponseValidationError{
				field:  "Problem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProblemResponseMultiError(errors)
	}

	return nil
}

// CreateProblemResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProblemResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProblemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProblemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProblemResponseMultiError) AllErrors() []error { return m }

// CreateProblemResponseValidationError is the validation error returned by
// CreateProblemResponse.Validate if the designated constraints aren't met.
type CreateProblemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProblemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProblemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProblemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProblemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProblemResponseValidationError) ErrorName() string {
	return "CreateProblemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProblemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProblemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProblemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProblemResponseValidationError{}

// Validate checks the field values on GetProblemListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemListRequestMultiError, or nil if none found.
func (m *GetProblemListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	if m.GetLimit() > 100 {
		err := GetProblemListRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProblemListRequestMultiError(errors)
	}

	return nil
}

// GetProblemListRequestMultiError is an error wrapping multiple validation
// errors returned by GetProblemListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProblemListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemListRequestMultiError) AllErrors() []error { return m }

// GetProblemListRequestValidationError is the validation error returned by
// GetProblemListRequest.Validate if the designated constraints aren't met.
type GetProblemListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemListRequestValidationError) ErrorName() string {
	return "GetProblemListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemListRequestValidationError{}

// Validate checks the field values on GetProblemListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemListResponseMultiError, or nil if none found.
func (m *GetProblemListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProblem() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProblemListResponseValidationError{
						field:  fmt.Sprintf("Problem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProblemListResponseValidationError{
						field:  fmt.Sprintf("Problem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProblemListResponseValidationError{
					field:  fmt.Sprintf("Problem[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalProblemCount

	if len(errors) > 0 {
		return GetProblemListResponseMultiError(errors)
	}

	return nil
}

// GetProblemListResponseMultiError is an error wrapping multiple validation
// errors returned by GetProblemListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProblemListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemListResponseMultiError) AllErrors() []error { return m }

// GetProblemListResponseValidationError is the validation error returned by
// GetProblemListResponse.Validate if the designated constraints aren't met.
type GetProblemListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemListResponseValidationError) ErrorName() string {
	return "GetProblemListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemListResponseValidationError{}

// Validate checks the field values on GetProblemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemRequestMultiError, or nil if none found.
func (m *GetProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProblemRequestMultiError(errors)
	}

	return nil
}

// GetProblemRequestMultiError is an error wrapping multiple validation errors
// returned by GetProblemRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemRequestMultiError) AllErrors() []error { return m }

// GetProblemRequestValidationError is the validation error returned by
// GetProblemRequest.Validate if the designated constraints aren't met.
type GetProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemRequestValidationError) ErrorName() string {
	return "GetProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemRequestValidationError{}

// Validate checks the field values on GetProblemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProblemResponseMultiError, or nil if none found.
func (m *GetProblemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProblem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProblemResponseValidationError{
					field:  "Problem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProblemResponseValidationError{
					field:  "Problem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProblem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProblemResponseValidationError{
				field:  "Problem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProblemResponseMultiError(errors)
	}

	return nil
}

// GetProblemResponseMultiError is an error wrapping multiple validation errors
// returned by GetProblemResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProblemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemResponseMultiError) AllErrors() []error { return m }

// GetProblemResponseValidationError is the validation error returned by
// GetProblemResponse.Validate if the designated constraints aren't met.
type GetProblemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemResponseValidationError) ErrorName() string {
	return "GetProblemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemResponseValidationError{}

// Validate checks the field values on UpdateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProblemRequestMultiError, or nil if none found.
func (m *UpdateProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.DisplayName != nil {
		// no validation rules for DisplayName
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.TimeLimit != nil {
		// no validation rules for TimeLimit
	}

	if m.MemoryLimit != nil {
		// no validation rules for MemoryLimit
	}

	if len(errors) > 0 {
		return UpdateProblemRequestMultiError(errors)
	}

	return nil
}

// UpdateProblemRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProblemRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProblemRequestMultiError) AllErrors() []error { return m }

// UpdateProblemRequestValidationError is the validation error returned by
// UpdateProblemRequest.Validate if the designated constraints aren't met.
type UpdateProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProblemRequestValidationError) ErrorName() string {
	return "UpdateProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProblemRequestValidationError{}

// Validate checks the field values on UpdateProblemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProblemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProblemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProblemResponseMultiError, or nil if none found.
func (m *UpdateProblemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProblemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProblem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProblemResponseValidationError{
					field:  "Problem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProblemResponseValidationError{
					field:  "Problem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProblem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProblemResponseValidationError{
				field:  "Problem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProblemResponseMultiError(errors)
	}

	return nil
}

// UpdateProblemResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProblemResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProblemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProblemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProblemResponseMultiError) AllErrors() []error { return m }

// UpdateProblemResponseValidationError is the validation error returned by
// UpdateProblemResponse.Validate if the designated constraints aren't met.
type UpdateProblemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProblemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProblemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProblemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProblemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProblemResponseValidationError) ErrorName() string {
	return "UpdateProblemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProblemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProblemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProblemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProblemResponseValidationError{}

// Validate checks the field values on DeleteProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProblemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProblemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProblemRequestMultiError, or nil if none found.
func (m *DeleteProblemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProblemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProblemRequestMultiError(errors)
	}

	return nil
}

// DeleteProblemRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProblemRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProblemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProblemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProblemRequestMultiError) AllErrors() []error { return m }

// DeleteProblemRequestValidationError is the validation error returned by
// DeleteProblemRequest.Validate if the designated constraints aren't met.
type DeleteProblemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProblemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProblemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProblemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProblemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProblemRequestValidationError) ErrorName() string {
	return "DeleteProblemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProblemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProblemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProblemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProblemRequestValidationError{}

// Validate checks the field values on DeleteProblemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProblemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProblemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProblemResponseMultiError, or nil if none found.
func (m *DeleteProblemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProblemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProblemResponseMultiError(errors)
	}

	return nil
}

// DeleteProblemResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProblemResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProblemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProblemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProblemResponseMultiError) AllErrors() []error { return m }

// DeleteProblemResponseValidationError is the validation error returned by
// DeleteProblemResponse.Validate if the designated constraints aren't met.
type DeleteProblemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProblemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProblemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProblemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProblemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProblemResponseValidationError) ErrorName() string {
	return "DeleteProblemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProblemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProblemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProblemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProblemResponseValidationError{}

// Validate checks the field values on CreateTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTestCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTestCaseRequestMultiError, or nil if none found.
func (m *CreateTestCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTestCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfProblemId

	// no validation rules for Input

	// no validation rules for Output

	// no validation rules for IsHidden

	if len(errors) > 0 {
		return CreateTestCaseRequestMultiError(errors)
	}

	return nil
}

// CreateTestCaseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTestCaseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTestCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTestCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTestCaseRequestMultiError) AllErrors() []error { return m }

// CreateTestCaseRequestValidationError is the validation error returned by
// CreateTestCaseRequest.Validate if the designated constraints aren't met.
type CreateTestCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestCaseRequestValidationError) ErrorName() string {
	return "CreateTestCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestCaseRequestValidationError{}

// Validate checks the field values on TestCase with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestCase with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestCaseMultiError, or nil
// if none found.
func (m *TestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *TestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OfProblemId

	// no validation rules for Input

	// no validation rules for Output

	// no validation rules for IsHidden

	if len(errors) > 0 {
		return TestCaseMultiError(errors)
	}

	return nil
}

// TestCaseMultiError is an error wrapping multiple validation errors returned
// by TestCase.ValidateAll() if the designated constraints aren't met.
type TestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestCaseMultiError) AllErrors() []error { return m }

// TestCaseValidationError is the validation error returned by
// TestCase.Validate if the designated constraints aren't met.
type TestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestCaseValidationError) ErrorName() string { return "TestCaseValidationError" }

// Error satisfies the builtin error interface
func (e TestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestCaseValidationError{}

// Validate checks the field values on CreateTestCaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTestCaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTestCaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTestCaseResponseMultiError, or nil if none found.
func (m *CreateTestCaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTestCaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestCase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTestCaseResponseValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTestCaseResponseValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestCase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTestCaseResponseValidationError{
				field:  "TestCase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTestCaseResponseMultiError(errors)
	}

	return nil
}

// CreateTestCaseResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTestCaseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTestCaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTestCaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTestCaseResponseMultiError) AllErrors() []error { return m }

// CreateTestCaseResponseValidationError is the validation error returned by
// CreateTestCaseResponse.Validate if the designated constraints aren't met.
type CreateTestCaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestCaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestCaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestCaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestCaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestCaseResponseValidationError) ErrorName() string {
	return "CreateTestCaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestCaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestCaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestCaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestCaseResponseValidationError{}

// Validate checks the field values on GetProblemTestCaseListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemTestCaseListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemTestCaseListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProblemTestCaseListRequestMultiError, or nil if none found.
func (m *GetProblemTestCaseListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemTestCaseListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetProblemTestCaseListRequestMultiError(errors)
	}

	return nil
}

// GetProblemTestCaseListRequestMultiError is an error wrapping multiple
// validation errors returned by GetProblemTestCaseListRequest.ValidateAll()
// if the designated constraints aren't met.
type GetProblemTestCaseListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemTestCaseListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemTestCaseListRequestMultiError) AllErrors() []error { return m }

// GetProblemTestCaseListRequestValidationError is the validation error
// returned by GetProblemTestCaseListRequest.Validate if the designated
// constraints aren't met.
type GetProblemTestCaseListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemTestCaseListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemTestCaseListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemTestCaseListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemTestCaseListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemTestCaseListRequestValidationError) ErrorName() string {
	return "GetProblemTestCaseListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemTestCaseListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemTestCaseListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemTestCaseListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemTestCaseListRequestValidationError{}

// Validate checks the field values on GetProblemTestCaseListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemTestCaseListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemTestCaseListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProblemTestCaseListResponseMultiError, or nil if none found.
func (m *GetProblemTestCaseListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemTestCaseListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTestCases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProblemTestCaseListResponseValidationError{
						field:  fmt.Sprintf("TestCases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProblemTestCaseListResponseValidationError{
						field:  fmt.Sprintf("TestCases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProblemTestCaseListResponseValidationError{
					field:  fmt.Sprintf("TestCases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalTestCasesCount

	if len(errors) > 0 {
		return GetProblemTestCaseListResponseMultiError(errors)
	}

	return nil
}

// GetProblemTestCaseListResponseMultiError is an error wrapping multiple
// validation errors returned by GetProblemTestCaseListResponse.ValidateAll()
// if the designated constraints aren't met.
type GetProblemTestCaseListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemTestCaseListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemTestCaseListResponseMultiError) AllErrors() []error { return m }

// GetProblemTestCaseListResponseValidationError is the validation error
// returned by GetProblemTestCaseListResponse.Validate if the designated
// constraints aren't met.
type GetProblemTestCaseListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemTestCaseListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemTestCaseListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemTestCaseListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemTestCaseListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemTestCaseListResponseValidationError) ErrorName() string {
	return "GetProblemTestCaseListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemTestCaseListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemTestCaseListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemTestCaseListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemTestCaseListResponseValidationError{}

// Validate checks the field values on GetTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestCaseRequestMultiError, or nil if none found.
func (m *GetTestCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTestCaseRequestMultiError(errors)
	}

	return nil
}

// GetTestCaseRequestMultiError is an error wrapping multiple validation errors
// returned by GetTestCaseRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTestCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestCaseRequestMultiError) AllErrors() []error { return m }

// GetTestCaseRequestValidationError is the validation error returned by
// GetTestCaseRequest.Validate if the designated constraints aren't met.
type GetTestCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestCaseRequestValidationError) ErrorName() string {
	return "GetTestCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestCaseRequestValidationError{}

// Validate checks the field values on GetTestCaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestCaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestCaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestCaseResponseMultiError, or nil if none found.
func (m *GetTestCaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestCaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestCase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTestCaseResponseValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTestCaseResponseValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestCase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTestCaseResponseValidationError{
				field:  "TestCase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTestCaseResponseMultiError(errors)
	}

	return nil
}

// GetTestCaseResponseMultiError is an error wrapping multiple validation
// errors returned by GetTestCaseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTestCaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestCaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestCaseResponseMultiError) AllErrors() []error { return m }

// GetTestCaseResponseValidationError is the validation error returned by
// GetTestCaseResponse.Validate if the designated constraints aren't met.
type GetTestCaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestCaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestCaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestCaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestCaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestCaseResponseValidationError) ErrorName() string {
	return "GetTestCaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestCaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestCaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestCaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestCaseResponseValidationError{}

// Validate checks the field values on UpdateTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestCaseRequestMultiError, or nil if none found.
func (m *UpdateTestCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Input != nil {
		// no validation rules for Input
	}

	if m.Output != nil {
		// no validation rules for Output
	}

	if m.IsHidden != nil {
		// no validation rules for IsHidden
	}

	if len(errors) > 0 {
		return UpdateTestCaseRequestMultiError(errors)
	}

	return nil
}

// UpdateTestCaseRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTestCaseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTestCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestCaseRequestMultiError) AllErrors() []error { return m }

// UpdateTestCaseRequestValidationError is the validation error returned by
// UpdateTestCaseRequest.Validate if the designated constraints aren't met.
type UpdateTestCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestCaseRequestValidationError) ErrorName() string {
	return "UpdateTestCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestCaseRequestValidationError{}

// Validate checks the field values on UpdateTestCaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestCaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestCaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestCaseResponseMultiError, or nil if none found.
func (m *UpdateTestCaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestCaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestCase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestCaseResponseValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestCaseResponseValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestCase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestCaseResponseValidationError{
				field:  "TestCase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTestCaseResponseMultiError(errors)
	}

	return nil
}

// UpdateTestCaseResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTestCaseResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTestCaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestCaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestCaseResponseMultiError) AllErrors() []error { return m }

// UpdateTestCaseResponseValidationError is the validation error returned by
// UpdateTestCaseResponse.Validate if the designated constraints aren't met.
type UpdateTestCaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestCaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestCaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestCaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestCaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestCaseResponseValidationError) ErrorName() string {
	return "UpdateTestCaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestCaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestCaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestCaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestCaseResponseValidationError{}

// Validate checks the field values on DeleteTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestCaseRequestMultiError, or nil if none found.
func (m *DeleteTestCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTestCaseRequestMultiError(errors)
	}

	return nil
}

// DeleteTestCaseRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTestCaseRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTestCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestCaseRequestMultiError) AllErrors() []error { return m }

// DeleteTestCaseRequestValidationError is the validation error returned by
// DeleteTestCaseRequest.Validate if the designated constraints aren't met.
type DeleteTestCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestCaseRequestValidationError) ErrorName() string {
	return "DeleteTestCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestCaseRequestValidationError{}

// Validate checks the field values on DeleteTestCaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestCaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestCaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestCaseResponseMultiError, or nil if none found.
func (m *DeleteTestCaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestCaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTestCaseResponseMultiError(errors)
	}

	return nil
}

// DeleteTestCaseResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTestCaseResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTestCaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestCaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestCaseResponseMultiError) AllErrors() []error { return m }

// DeleteTestCaseResponseValidationError is the validation error returned by
// DeleteTestCaseResponse.Validate if the designated constraints aren't met.
type DeleteTestCaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestCaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestCaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestCaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestCaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestCaseResponseValidationError) ErrorName() string {
	return "DeleteTestCaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestCaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestCaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestCaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestCaseResponseValidationError{}

// Validate checks the field values on CreateSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubmissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubmissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubmissionRequestMultiError, or nil if none found.
func (m *CreateSubmissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubmissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfProblemId

	// no validation rules for AuthorId

	// no validation rules for Content

	// no validation rules for Language

	if len(errors) > 0 {
		return CreateSubmissionRequestMultiError(errors)
	}

	return nil
}

// CreateSubmissionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubmissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubmissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubmissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubmissionRequestMultiError) AllErrors() []error { return m }

// CreateSubmissionRequestValidationError is the validation error returned by
// CreateSubmissionRequest.Validate if the designated constraints aren't met.
type CreateSubmissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubmissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubmissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubmissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubmissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubmissionRequestValidationError) ErrorName() string {
	return "CreateSubmissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubmissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubmissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubmissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubmissionRequestValidationError{}

// Validate checks the field values on Submission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Submission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Submission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubmissionMultiError, or
// nil if none found.
func (m *Submission) ValidateAll() error {
	return m.validate(true)
}

func (m *Submission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OfProblemId

	// no validation rules for AuthorId

	// no validation rules for Content

	// no validation rules for Language

	// no validation rules for Status

	// no validation rules for Result

	if len(errors) > 0 {
		return SubmissionMultiError(errors)
	}

	return nil
}

// SubmissionMultiError is an error wrapping multiple validation errors
// returned by Submission.ValidateAll() if the designated constraints aren't met.
type SubmissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmissionMultiError) AllErrors() []error { return m }

// SubmissionValidationError is the validation error returned by
// Submission.Validate if the designated constraints aren't met.
type SubmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmissionValidationError) ErrorName() string { return "SubmissionValidationError" }

// Error satisfies the builtin error interface
func (e SubmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmissionValidationError{}

// Validate checks the field values on CreateSubmissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubmissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubmissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubmissionResponseMultiError, or nil if none found.
func (m *CreateSubmissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubmissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubmission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSubmissionResponseValidationError{
					field:  "Submission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSubmissionResponseValidationError{
					field:  "Submission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubmission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSubmissionResponseValidationError{
				field:  "Submission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSubmissionResponseMultiError(errors)
	}

	return nil
}

// CreateSubmissionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSubmissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSubmissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubmissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubmissionResponseMultiError) AllErrors() []error { return m }

// CreateSubmissionResponseValidationError is the validation error returned by
// CreateSubmissionResponse.Validate if the designated constraints aren't met.
type CreateSubmissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubmissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubmissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubmissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubmissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubmissionResponseValidationError) ErrorName() string {
	return "CreateSubmissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubmissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubmissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubmissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubmissionResponseValidationError{}

// Validate checks the field values on GetSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionRequestMultiError, or nil if none found.
func (m *GetSubmissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSubmissionRequestMultiError(errors)
	}

	return nil
}

// GetSubmissionRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubmissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionRequestMultiError) AllErrors() []error { return m }

// GetSubmissionRequestValidationError is the validation error returned by
// GetSubmissionRequest.Validate if the designated constraints aren't met.
type GetSubmissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionRequestValidationError) ErrorName() string {
	return "GetSubmissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionRequestValidationError{}

// Validate checks the field values on GetSubmissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionResponseMultiError, or nil if none found.
func (m *GetSubmissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubmission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSubmissionResponseValidationError{
					field:  "Submission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSubmissionResponseValidationError{
					field:  "Submission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubmission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSubmissionResponseValidationError{
				field:  "Submission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSubmissionResponseMultiError(errors)
	}

	return nil
}

// GetSubmissionResponseMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSubmissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionResponseMultiError) AllErrors() []error { return m }

// GetSubmissionResponseValidationError is the validation error returned by
// GetSubmissionResponse.Validate if the designated constraints aren't met.
type GetSubmissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionResponseValidationError) ErrorName() string {
	return "GetSubmissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionResponseValidationError{}

// Validate checks the field values on GetSubmissionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionListRequestMultiError, or nil if none found.
func (m *GetSubmissionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetSubmissionListRequestMultiError(errors)
	}

	return nil
}

// GetSubmissionListRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubmissionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionListRequestMultiError) AllErrors() []error { return m }

// GetSubmissionListRequestValidationError is the validation error returned by
// GetSubmissionListRequest.Validate if the designated constraints aren't met.
type GetSubmissionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionListRequestValidationError) ErrorName() string {
	return "GetSubmissionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionListRequestValidationError{}

// Validate checks the field values on GetSubmissionListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubmissionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubmissionListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubmissionListResponseMultiError, or nil if none found.
func (m *GetSubmissionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubmissionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubmissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubmissionListResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubmissionListResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubmissionListResponseValidationError{
					field:  fmt.Sprintf("Submissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSubmissionsCount

	if len(errors) > 0 {
		return GetSubmissionListResponseMultiError(errors)
	}

	return nil
}

// GetSubmissionListResponseMultiError is an error wrapping multiple validation
// errors returned by GetSubmissionListResponse.ValidateAll() if the
// designated constraints aren't met.
type GetSubmissionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubmissionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubmissionListResponseMultiError) AllErrors() []error { return m }

// GetSubmissionListResponseValidationError is the validation error returned by
// GetSubmissionListResponse.Validate if the designated constraints aren't met.
type GetSubmissionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubmissionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubmissionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubmissionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubmissionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubmissionListResponseValidationError) ErrorName() string {
	return "GetSubmissionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubmissionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubmissionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubmissionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubmissionListResponseValidationError{}

// Validate checks the field values on GetProblemSubmissionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProblemSubmissionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemSubmissionListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProblemSubmissionListRequestMultiError, or nil if none found.
func (m *GetProblemSubmissionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemSubmissionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetProblemSubmissionListRequestMultiError(errors)
	}

	return nil
}

// GetProblemSubmissionListRequestMultiError is an error wrapping multiple
// validation errors returned by GetProblemSubmissionListRequest.ValidateAll()
// if the designated constraints aren't met.
type GetProblemSubmissionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemSubmissionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemSubmissionListRequestMultiError) AllErrors() []error { return m }

// GetProblemSubmissionListRequestValidationError is the validation error
// returned by GetProblemSubmissionListRequest.Validate if the designated
// constraints aren't met.
type GetProblemSubmissionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemSubmissionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemSubmissionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemSubmissionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemSubmissionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemSubmissionListRequestValidationError) ErrorName() string {
	return "GetProblemSubmissionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemSubmissionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemSubmissionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemSubmissionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemSubmissionListRequestValidationError{}

// Validate checks the field values on GetProblemSubmissionListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetProblemSubmissionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProblemSubmissionListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProblemSubmissionListResponseMultiError, or nil if none found.
func (m *GetProblemSubmissionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProblemSubmissionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubmissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProblemSubmissionListResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProblemSubmissionListResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProblemSubmissionListResponseValidationError{
					field:  fmt.Sprintf("Submissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSubmissionsCount

	if len(errors) > 0 {
		return GetProblemSubmissionListResponseMultiError(errors)
	}

	return nil
}

// GetProblemSubmissionListResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetProblemSubmissionListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProblemSubmissionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProblemSubmissionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProblemSubmissionListResponseMultiError) AllErrors() []error { return m }

// GetProblemSubmissionListResponseValidationError is the validation error
// returned by GetProblemSubmissionListResponse.Validate if the designated
// constraints aren't met.
type GetProblemSubmissionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProblemSubmissionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProblemSubmissionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProblemSubmissionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProblemSubmissionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProblemSubmissionListResponseValidationError) ErrorName() string {
	return "GetProblemSubmissionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProblemSubmissionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProblemSubmissionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProblemSubmissionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProblemSubmissionListResponseValidationError{}

// Validate checks the field values on GetAccountProblemSubmissionListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetAccountProblemSubmissionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAccountProblemSubmissionListRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetAccountProblemSubmissionListRequestMultiError, or nil if none found.
func (m *GetAccountProblemSubmissionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountProblemSubmissionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for ProblemId

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetAccountProblemSubmissionListRequestMultiError(errors)
	}

	return nil
}

// GetAccountProblemSubmissionListRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetAccountProblemSubmissionListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccountProblemSubmissionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountProblemSubmissionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountProblemSubmissionListRequestMultiError) AllErrors() []error { return m }

// GetAccountProblemSubmissionListRequestValidationError is the validation
// error returned by GetAccountProblemSubmissionListRequest.Validate if the
// designated constraints aren't met.
type GetAccountProblemSubmissionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountProblemSubmissionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountProblemSubmissionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountProblemSubmissionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountProblemSubmissionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountProblemSubmissionListRequestValidationError) ErrorName() string {
	return "GetAccountProblemSubmissionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountProblemSubmissionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountProblemSubmissionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountProblemSubmissionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountProblemSubmissionListRequestValidationError{}

// Validate checks the field values on GetAccountProblemSubmissionListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetAccountProblemSubmissionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAccountProblemSubmissionListResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetAccountProblemSubmissionListResponseMultiError, or nil if none found.
func (m *GetAccountProblemSubmissionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountProblemSubmissionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubmissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountProblemSubmissionListResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountProblemSubmissionListResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountProblemSubmissionListResponseValidationError{
					field:  fmt.Sprintf("Submissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSubmissionsCount

	if len(errors) > 0 {
		return GetAccountProblemSubmissionListResponseMultiError(errors)
	}

	return nil
}

// GetAccountProblemSubmissionListResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetAccountProblemSubmissionListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountProblemSubmissionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountProblemSubmissionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountProblemSubmissionListResponseMultiError) AllErrors() []error { return m }

// GetAccountProblemSubmissionListResponseValidationError is the validation
// error returned by GetAccountProblemSubmissionListResponse.Validate if the
// designated constraints aren't met.
type GetAccountProblemSubmissionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountProblemSubmissionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountProblemSubmissionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountProblemSubmissionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountProblemSubmissionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountProblemSubmissionListResponseValidationError) ErrorName() string {
	return "GetAccountProblemSubmissionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountProblemSubmissionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountProblemSubmissionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountProblemSubmissionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountProblemSubmissionListResponseValidationError{}

// Validate checks the field values on
// GetAndUpdateFirstSubmittedSubmissionToExecutingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAndUpdateFirstSubmittedSubmissionToExecutingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAndUpdateFirstSubmittedSubmissionToExecutingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAndUpdateFirstSubmittedSubmissionToExecutingRequestMultiError, or nil if
// none found.
func (m *GetAndUpdateFirstSubmittedSubmissionToExecutingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAndUpdateFirstSubmittedSubmissionToExecutingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAndUpdateFirstSubmittedSubmissionToExecutingRequestMultiError(errors)
	}

	return nil
}

// GetAndUpdateFirstSubmittedSubmissionToExecutingRequestMultiError is an error
// wrapping multiple validation errors returned by
// GetAndUpdateFirstSubmittedSubmissionToExecutingRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAndUpdateFirstSubmittedSubmissionToExecutingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAndUpdateFirstSubmittedSubmissionToExecutingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAndUpdateFirstSubmittedSubmissionToExecutingRequestMultiError) AllErrors() []error {
	return m
}

// GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError is the
// validation error returned by
// GetAndUpdateFirstSubmittedSubmissionToExecutingRequest.Validate if the
// designated constraints aren't met.
type GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError) ErrorName() string {
	return "GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAndUpdateFirstSubmittedSubmissionToExecutingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAndUpdateFirstSubmittedSubmissionToExecutingRequestValidationError{}

// Validate checks the field values on
// GetAndUpdateFirstSubmittedSubmissionToExecutingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAndUpdateFirstSubmittedSubmissionToExecutingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAndUpdateFirstSubmittedSubmissionToExecutingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAndUpdateFirstSubmittedSubmissionToExecutingResponseMultiError, or nil
// if none found.
func (m *GetAndUpdateFirstSubmittedSubmissionToExecutingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAndUpdateFirstSubmittedSubmissionToExecutingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAndUpdateFirstSubmittedSubmissionToExecutingResponseMultiError(errors)
	}

	return nil
}

// GetAndUpdateFirstSubmittedSubmissionToExecutingResponseMultiError is an
// error wrapping multiple validation errors returned by
// GetAndUpdateFirstSubmittedSubmissionToExecutingResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAndUpdateFirstSubmittedSubmissionToExecutingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAndUpdateFirstSubmittedSubmissionToExecutingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAndUpdateFirstSubmittedSubmissionToExecutingResponseMultiError) AllErrors() []error {
	return m
}

// GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError is
// the validation error returned by
// GetAndUpdateFirstSubmittedSubmissionToExecutingResponse.Validate if the
// designated constraints aren't met.
type GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError) ErrorName() string {
	return "GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAndUpdateFirstSubmittedSubmissionToExecutingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAndUpdateFirstSubmittedSubmissionToExecutingResponseValidationError{}

// Validate checks the field values on UpdateSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSettingRequestMultiError, or nil if none found.
func (m *UpdateSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSettingRequestMultiError(errors)
	}

	return nil
}

// UpdateSettingRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSettingRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSettingRequestMultiError) AllErrors() []error { return m }

// UpdateSettingRequestValidationError is the validation error returned by
// UpdateSettingRequest.Validate if the designated constraints aren't met.
type UpdateSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSettingRequestValidationError) ErrorName() string {
	return "UpdateSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSettingRequestValidationError{}

// Validate checks the field values on UpdateSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSettingResponseMultiError, or nil if none found.
func (m *UpdateSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSettingResponseMultiError(errors)
	}

	return nil
}

// UpdateSettingResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSettingResponseMultiError) AllErrors() []error { return m }

// UpdateSettingResponseValidationError is the validation error returned by
// UpdateSettingResponse.Validate if the designated constraints aren't met.
type UpdateSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSettingResponseValidationError) ErrorName() string {
	return "UpdateSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSettingResponseValidationError{}
