// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: ojs.proto

package ojs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OjsService_GetServerInfo_FullMethodName                                   = "/ojs.OjsService/GetServerInfo"
	OjsService_CreateAccount_FullMethodName                                   = "/ojs.OjsService/CreateAccount"
	OjsService_GetAccount_FullMethodName                                      = "/ojs.OjsService/GetAccount"
	OjsService_CreateSession_FullMethodName                                   = "/ojs.OjsService/CreateSession"
	OjsService_DeleteSession_FullMethodName                                   = "/ojs.OjsService/DeleteSession"
	OjsService_CreateProblem_FullMethodName                                   = "/ojs.OjsService/CreateProblem"
	OjsService_GetProblemList_FullMethodName                                  = "/ojs.OjsService/GetProblemList"
	OjsService_GetProblem_FullMethodName                                      = "/ojs.OjsService/GetProblem"
	OjsService_UpdateProblem_FullMethodName                                   = "/ojs.OjsService/UpdateProblem"
	OjsService_DeleteProblem_FullMethodName                                   = "/ojs.OjsService/DeleteProblem"
	OjsService_CreateTestCase_FullMethodName                                  = "/ojs.OjsService/CreateTestCase"
	OjsService_GetProblemTestCaseList_FullMethodName                          = "/ojs.OjsService/GetProblemTestCaseList"
	OjsService_GetTestCase_FullMethodName                                     = "/ojs.OjsService/GetTestCase"
	OjsService_UpdateTestCase_FullMethodName                                  = "/ojs.OjsService/UpdateTestCase"
	OjsService_DeleteTestCase_FullMethodName                                  = "/ojs.OjsService/DeleteTestCase"
	OjsService_CreateSubmission_FullMethodName                                = "/ojs.OjsService/CreateSubmission"
	OjsService_GetSubmission_FullMethodName                                   = "/ojs.OjsService/GetSubmission"
	OjsService_GetSubmissionList_FullMethodName                               = "/ojs.OjsService/GetSubmissionList"
	OjsService_GetProblemSubmissionList_FullMethodName                        = "/ojs.OjsService/GetProblemSubmissionList"
	OjsService_GetAccountProblemSubmissionList_FullMethodName                 = "/ojs.OjsService/GetAccountProblemSubmissionList"
	OjsService_GetAndUpdateFirstSubmittedSubmissionToExecuting_FullMethodName = "/ojs.OjsService/GetAndUpdateFirstSubmittedSubmissionToExecuting"
	OjsService_UpdateSetting_FullMethodName                                   = "/ojs.OjsService/UpdateSetting"
)

// OjsServiceClient is the client API for OjsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OjsServiceClient interface {
	GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*GetServerInfoResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*DeleteSessionResponse, error)
	CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error)
	GetProblemList(ctx context.Context, in *GetProblemListRequest, opts ...grpc.CallOption) (*GetProblemListResponse, error)
	GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error)
	UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemResponse, error)
	DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemResponse, error)
	CreateTestCase(ctx context.Context, in *CreateTestCaseRequest, opts ...grpc.CallOption) (*CreateTestCaseResponse, error)
	GetProblemTestCaseList(ctx context.Context, in *GetProblemTestCaseListRequest, opts ...grpc.CallOption) (*GetProblemTestCaseListResponse, error)
	GetTestCase(ctx context.Context, in *GetTestCaseRequest, opts ...grpc.CallOption) (*GetTestCaseResponse, error)
	UpdateTestCase(ctx context.Context, in *UpdateTestCaseRequest, opts ...grpc.CallOption) (*UpdateTestCaseResponse, error)
	DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*DeleteTestCaseResponse, error)
	CreateSubmission(ctx context.Context, in *CreateSubmissionRequest, opts ...grpc.CallOption) (*CreateSubmissionResponse, error)
	GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...grpc.CallOption) (*GetSubmissionResponse, error)
	GetSubmissionList(ctx context.Context, in *GetSubmissionListRequest, opts ...grpc.CallOption) (*GetSubmissionListResponse, error)
	GetProblemSubmissionList(ctx context.Context, in *GetProblemSubmissionListRequest, opts ...grpc.CallOption) (*GetProblemSubmissionListResponse, error)
	GetAccountProblemSubmissionList(ctx context.Context, in *GetAccountProblemSubmissionListRequest, opts ...grpc.CallOption) (*GetAccountProblemSubmissionListResponse, error)
	GetAndUpdateFirstSubmittedSubmissionToExecuting(ctx context.Context, in *GetAndUpdateFirstSubmittedSubmissionToExecutingRequest, opts ...grpc.CallOption) (*GetAndUpdateFirstSubmittedSubmissionToExecutingResponse, error)
	UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingResponse, error)
}

type ojsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOjsServiceClient(cc grpc.ClientConnInterface) OjsServiceClient {
	return &ojsServiceClient{cc}
}

func (c *ojsServiceClient) GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*GetServerInfoResponse, error) {
	out := new(GetServerInfoResponse)
	err := c.cc.Invoke(ctx, OjsService_GetServerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, OjsService_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, OjsService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, OjsService_CreateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*DeleteSessionResponse, error) {
	out := new(DeleteSessionResponse)
	err := c.cc.Invoke(ctx, OjsService_DeleteSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error) {
	out := new(CreateProblemResponse)
	err := c.cc.Invoke(ctx, OjsService_CreateProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) GetProblemList(ctx context.Context, in *GetProblemListRequest, opts ...grpc.CallOption) (*GetProblemListResponse, error) {
	out := new(GetProblemListResponse)
	err := c.cc.Invoke(ctx, OjsService_GetProblemList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error) {
	out := new(GetProblemResponse)
	err := c.cc.Invoke(ctx, OjsService_GetProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemResponse, error) {
	out := new(UpdateProblemResponse)
	err := c.cc.Invoke(ctx, OjsService_UpdateProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemResponse, error) {
	out := new(DeleteProblemResponse)
	err := c.cc.Invoke(ctx, OjsService_DeleteProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) CreateTestCase(ctx context.Context, in *CreateTestCaseRequest, opts ...grpc.CallOption) (*CreateTestCaseResponse, error) {
	out := new(CreateTestCaseResponse)
	err := c.cc.Invoke(ctx, OjsService_CreateTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) GetProblemTestCaseList(ctx context.Context, in *GetProblemTestCaseListRequest, opts ...grpc.CallOption) (*GetProblemTestCaseListResponse, error) {
	out := new(GetProblemTestCaseListResponse)
	err := c.cc.Invoke(ctx, OjsService_GetProblemTestCaseList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) GetTestCase(ctx context.Context, in *GetTestCaseRequest, opts ...grpc.CallOption) (*GetTestCaseResponse, error) {
	out := new(GetTestCaseResponse)
	err := c.cc.Invoke(ctx, OjsService_GetTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) UpdateTestCase(ctx context.Context, in *UpdateTestCaseRequest, opts ...grpc.CallOption) (*UpdateTestCaseResponse, error) {
	out := new(UpdateTestCaseResponse)
	err := c.cc.Invoke(ctx, OjsService_UpdateTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*DeleteTestCaseResponse, error) {
	out := new(DeleteTestCaseResponse)
	err := c.cc.Invoke(ctx, OjsService_DeleteTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) CreateSubmission(ctx context.Context, in *CreateSubmissionRequest, opts ...grpc.CallOption) (*CreateSubmissionResponse, error) {
	out := new(CreateSubmissionResponse)
	err := c.cc.Invoke(ctx, OjsService_CreateSubmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) GetSubmission(ctx context.Context, in *GetSubmissionRequest, opts ...grpc.CallOption) (*GetSubmissionResponse, error) {
	out := new(GetSubmissionResponse)
	err := c.cc.Invoke(ctx, OjsService_GetSubmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) GetSubmissionList(ctx context.Context, in *GetSubmissionListRequest, opts ...grpc.CallOption) (*GetSubmissionListResponse, error) {
	out := new(GetSubmissionListResponse)
	err := c.cc.Invoke(ctx, OjsService_GetSubmissionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) GetProblemSubmissionList(ctx context.Context, in *GetProblemSubmissionListRequest, opts ...grpc.CallOption) (*GetProblemSubmissionListResponse, error) {
	out := new(GetProblemSubmissionListResponse)
	err := c.cc.Invoke(ctx, OjsService_GetProblemSubmissionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) GetAccountProblemSubmissionList(ctx context.Context, in *GetAccountProblemSubmissionListRequest, opts ...grpc.CallOption) (*GetAccountProblemSubmissionListResponse, error) {
	out := new(GetAccountProblemSubmissionListResponse)
	err := c.cc.Invoke(ctx, OjsService_GetAccountProblemSubmissionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) GetAndUpdateFirstSubmittedSubmissionToExecuting(ctx context.Context, in *GetAndUpdateFirstSubmittedSubmissionToExecutingRequest, opts ...grpc.CallOption) (*GetAndUpdateFirstSubmittedSubmissionToExecutingResponse, error) {
	out := new(GetAndUpdateFirstSubmittedSubmissionToExecutingResponse)
	err := c.cc.Invoke(ctx, OjsService_GetAndUpdateFirstSubmittedSubmissionToExecuting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ojsServiceClient) UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingResponse, error) {
	out := new(UpdateSettingResponse)
	err := c.cc.Invoke(ctx, OjsService_UpdateSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OjsServiceServer is the server API for OjsService service.
// All implementations must embed UnimplementedOjsServiceServer
// for forward compatibility
type OjsServiceServer interface {
	GetServerInfo(context.Context, *GetServerInfoRequest) (*GetServerInfoResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	DeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionResponse, error)
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error)
	GetProblemList(context.Context, *GetProblemListRequest) (*GetProblemListResponse, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error)
	UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemResponse, error)
	DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemResponse, error)
	CreateTestCase(context.Context, *CreateTestCaseRequest) (*CreateTestCaseResponse, error)
	GetProblemTestCaseList(context.Context, *GetProblemTestCaseListRequest) (*GetProblemTestCaseListResponse, error)
	GetTestCase(context.Context, *GetTestCaseRequest) (*GetTestCaseResponse, error)
	UpdateTestCase(context.Context, *UpdateTestCaseRequest) (*UpdateTestCaseResponse, error)
	DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*DeleteTestCaseResponse, error)
	CreateSubmission(context.Context, *CreateSubmissionRequest) (*CreateSubmissionResponse, error)
	GetSubmission(context.Context, *GetSubmissionRequest) (*GetSubmissionResponse, error)
	GetSubmissionList(context.Context, *GetSubmissionListRequest) (*GetSubmissionListResponse, error)
	GetProblemSubmissionList(context.Context, *GetProblemSubmissionListRequest) (*GetProblemSubmissionListResponse, error)
	GetAccountProblemSubmissionList(context.Context, *GetAccountProblemSubmissionListRequest) (*GetAccountProblemSubmissionListResponse, error)
	GetAndUpdateFirstSubmittedSubmissionToExecuting(context.Context, *GetAndUpdateFirstSubmittedSubmissionToExecutingRequest) (*GetAndUpdateFirstSubmittedSubmissionToExecutingResponse, error)
	UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingResponse, error)
	mustEmbedUnimplementedOjsServiceServer()
}

// UnimplementedOjsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOjsServiceServer struct {
}

func (UnimplementedOjsServiceServer) GetServerInfo(context.Context, *GetServerInfoRequest) (*GetServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedOjsServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedOjsServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedOjsServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedOjsServiceServer) DeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedOjsServiceServer) CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedOjsServiceServer) GetProblemList(context.Context, *GetProblemListRequest) (*GetProblemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemList not implemented")
}
func (UnimplementedOjsServiceServer) GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblem not implemented")
}
func (UnimplementedOjsServiceServer) UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblem not implemented")
}
func (UnimplementedOjsServiceServer) DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblem not implemented")
}
func (UnimplementedOjsServiceServer) CreateTestCase(context.Context, *CreateTestCaseRequest) (*CreateTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestCase not implemented")
}
func (UnimplementedOjsServiceServer) GetProblemTestCaseList(context.Context, *GetProblemTestCaseListRequest) (*GetProblemTestCaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemTestCaseList not implemented")
}
func (UnimplementedOjsServiceServer) GetTestCase(context.Context, *GetTestCaseRequest) (*GetTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestCase not implemented")
}
func (UnimplementedOjsServiceServer) UpdateTestCase(context.Context, *UpdateTestCaseRequest) (*UpdateTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestCase not implemented")
}
func (UnimplementedOjsServiceServer) DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*DeleteTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestCase not implemented")
}
func (UnimplementedOjsServiceServer) CreateSubmission(context.Context, *CreateSubmissionRequest) (*CreateSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubmission not implemented")
}
func (UnimplementedOjsServiceServer) GetSubmission(context.Context, *GetSubmissionRequest) (*GetSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmission not implemented")
}
func (UnimplementedOjsServiceServer) GetSubmissionList(context.Context, *GetSubmissionListRequest) (*GetSubmissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionList not implemented")
}
func (UnimplementedOjsServiceServer) GetProblemSubmissionList(context.Context, *GetProblemSubmissionListRequest) (*GetProblemSubmissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemSubmissionList not implemented")
}
func (UnimplementedOjsServiceServer) GetAccountProblemSubmissionList(context.Context, *GetAccountProblemSubmissionListRequest) (*GetAccountProblemSubmissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountProblemSubmissionList not implemented")
}
func (UnimplementedOjsServiceServer) GetAndUpdateFirstSubmittedSubmissionToExecuting(context.Context, *GetAndUpdateFirstSubmittedSubmissionToExecutingRequest) (*GetAndUpdateFirstSubmittedSubmissionToExecutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAndUpdateFirstSubmittedSubmissionToExecuting not implemented")
}
func (UnimplementedOjsServiceServer) UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (UnimplementedOjsServiceServer) mustEmbedUnimplementedOjsServiceServer() {}

// UnsafeOjsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OjsServiceServer will
// result in compilation errors.
type UnsafeOjsServiceServer interface {
	mustEmbedUnimplementedOjsServiceServer()
}

func RegisterOjsServiceServer(s grpc.ServiceRegistrar, srv OjsServiceServer) {
	s.RegisterService(&OjsService_ServiceDesc, srv)
}

func _OjsService_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetServerInfo(ctx, req.(*GetServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_CreateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).CreateProblem(ctx, req.(*CreateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_GetProblemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetProblemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetProblemList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetProblemList(ctx, req.(*GetProblemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_GetProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetProblem(ctx, req.(*GetProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_UpdateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).UpdateProblem(ctx, req.(*UpdateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_DeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).DeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_DeleteProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).DeleteProblem(ctx, req.(*DeleteProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_CreateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).CreateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_CreateTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).CreateTestCase(ctx, req.(*CreateTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_GetProblemTestCaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemTestCaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetProblemTestCaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetProblemTestCaseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetProblemTestCaseList(ctx, req.(*GetProblemTestCaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_GetTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetTestCase(ctx, req.(*GetTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_UpdateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).UpdateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_UpdateTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).UpdateTestCase(ctx, req.(*UpdateTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_DeleteTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).DeleteTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_DeleteTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).DeleteTestCase(ctx, req.(*DeleteTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_CreateSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).CreateSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_CreateSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).CreateSubmission(ctx, req.(*CreateSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_GetSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetSubmission(ctx, req.(*GetSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_GetSubmissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetSubmissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetSubmissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetSubmissionList(ctx, req.(*GetSubmissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_GetProblemSubmissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemSubmissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetProblemSubmissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetProblemSubmissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetProblemSubmissionList(ctx, req.(*GetProblemSubmissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_GetAccountProblemSubmissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountProblemSubmissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetAccountProblemSubmissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetAccountProblemSubmissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetAccountProblemSubmissionList(ctx, req.(*GetAccountProblemSubmissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_GetAndUpdateFirstSubmittedSubmissionToExecuting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAndUpdateFirstSubmittedSubmissionToExecutingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).GetAndUpdateFirstSubmittedSubmissionToExecuting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_GetAndUpdateFirstSubmittedSubmissionToExecuting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).GetAndUpdateFirstSubmittedSubmissionToExecuting(ctx, req.(*GetAndUpdateFirstSubmittedSubmissionToExecutingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OjsService_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OjsServiceServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OjsService_UpdateSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OjsServiceServer).UpdateSetting(ctx, req.(*UpdateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OjsService_ServiceDesc is the grpc.ServiceDesc for OjsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OjsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ojs.OjsService",
	HandlerType: (*OjsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerInfo",
			Handler:    _OjsService_GetServerInfo_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _OjsService_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _OjsService_GetAccount_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _OjsService_CreateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _OjsService_DeleteSession_Handler,
		},
		{
			MethodName: "CreateProblem",
			Handler:    _OjsService_CreateProblem_Handler,
		},
		{
			MethodName: "GetProblemList",
			Handler:    _OjsService_GetProblemList_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _OjsService_GetProblem_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _OjsService_UpdateProblem_Handler,
		},
		{
			MethodName: "DeleteProblem",
			Handler:    _OjsService_DeleteProblem_Handler,
		},
		{
			MethodName: "CreateTestCase",
			Handler:    _OjsService_CreateTestCase_Handler,
		},
		{
			MethodName: "GetProblemTestCaseList",
			Handler:    _OjsService_GetProblemTestCaseList_Handler,
		},
		{
			MethodName: "GetTestCase",
			Handler:    _OjsService_GetTestCase_Handler,
		},
		{
			MethodName: "UpdateTestCase",
			Handler:    _OjsService_UpdateTestCase_Handler,
		},
		{
			MethodName: "DeleteTestCase",
			Handler:    _OjsService_DeleteTestCase_Handler,
		},
		{
			MethodName: "CreateSubmission",
			Handler:    _OjsService_CreateSubmission_Handler,
		},
		{
			MethodName: "GetSubmission",
			Handler:    _OjsService_GetSubmission_Handler,
		},
		{
			MethodName: "GetSubmissionList",
			Handler:    _OjsService_GetSubmissionList_Handler,
		},
		{
			MethodName: "GetProblemSubmissionList",
			Handler:    _OjsService_GetProblemSubmissionList_Handler,
		},
		{
			MethodName: "GetAccountProblemSubmissionList",
			Handler:    _OjsService_GetAccountProblemSubmissionList_Handler,
		},
		{
			MethodName: "GetAndUpdateFirstSubmittedSubmissionToExecuting",
			Handler:    _OjsService_GetAndUpdateFirstSubmittedSubmissionToExecuting_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _OjsService_UpdateSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ojs.proto",
}
