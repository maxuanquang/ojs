/**
 * ojs.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OjsCreateAccountRequest from '../model/OjsCreateAccountRequest';
import OjsCreateAccountResponse from '../model/OjsCreateAccountResponse';
import OjsCreateProblemRequest from '../model/OjsCreateProblemRequest';
import OjsCreateProblemResponse from '../model/OjsCreateProblemResponse';
import OjsCreateSessionRequest from '../model/OjsCreateSessionRequest';
import OjsCreateSessionResponse from '../model/OjsCreateSessionResponse';
import OjsCreateSubmissionRequest from '../model/OjsCreateSubmissionRequest';
import OjsCreateSubmissionResponse from '../model/OjsCreateSubmissionResponse';
import OjsCreateTestCaseRequest from '../model/OjsCreateTestCaseRequest';
import OjsCreateTestCaseResponse from '../model/OjsCreateTestCaseResponse';
import OjsGetAccountProblemSubmissionListResponse from '../model/OjsGetAccountProblemSubmissionListResponse';
import OjsGetAccountResponse from '../model/OjsGetAccountResponse';
import OjsGetProblemListResponse from '../model/OjsGetProblemListResponse';
import OjsGetProblemResponse from '../model/OjsGetProblemResponse';
import OjsGetProblemSubmissionListResponse from '../model/OjsGetProblemSubmissionListResponse';
import OjsGetProblemTestCaseListResponse from '../model/OjsGetProblemTestCaseListResponse';
import OjsGetSubmissionListResponse from '../model/OjsGetSubmissionListResponse';
import OjsGetSubmissionResponse from '../model/OjsGetSubmissionResponse';
import OjsGetTestCaseResponse from '../model/OjsGetTestCaseResponse';
import OjsServiceUpdateProblemBody from '../model/OjsServiceUpdateProblemBody';
import OjsServiceUpdateTestCaseBody from '../model/OjsServiceUpdateTestCaseBody';
import OjsUpdateProblemResponse from '../model/OjsUpdateProblemResponse';
import OjsUpdateTestCaseResponse from '../model/OjsUpdateTestCaseResponse';
import RpcStatus from '../model/RpcStatus';

/**
* OjsService service.
* @module api/OjsServiceApi
* @version version not set
*/
export default class OjsServiceApi {

    /**
    * Constructs a new OjsServiceApi. 
    * @alias module:api/OjsServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ojsServiceCreateAccount operation.
     * @callback module:api/OjsServiceApi~ojsServiceCreateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsCreateAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/OjsCreateAccountRequest} body 
     * @param {module:api/OjsServiceApi~ojsServiceCreateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsCreateAccountResponse}
     */
    ojsServiceCreateAccount(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ojsServiceCreateAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OjsCreateAccountResponse;
      return this.apiClient.callApi(
        '/api/v1/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceCreateProblem operation.
     * @callback module:api/OjsServiceApi~ojsServiceCreateProblemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsCreateProblemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/OjsCreateProblemRequest} body 
     * @param {module:api/OjsServiceApi~ojsServiceCreateProblemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsCreateProblemResponse}
     */
    ojsServiceCreateProblem(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ojsServiceCreateProblem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OjsCreateProblemResponse;
      return this.apiClient.callApi(
        '/api/v1/problems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceCreateSession operation.
     * @callback module:api/OjsServiceApi~ojsServiceCreateSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsCreateSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/OjsCreateSessionRequest} body 
     * @param {module:api/OjsServiceApi~ojsServiceCreateSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsCreateSessionResponse}
     */
    ojsServiceCreateSession(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ojsServiceCreateSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OjsCreateSessionResponse;
      return this.apiClient.callApi(
        '/api/v1/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceCreateSubmission operation.
     * @callback module:api/OjsServiceApi~ojsServiceCreateSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsCreateSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/OjsCreateSubmissionRequest} body 
     * @param {module:api/OjsServiceApi~ojsServiceCreateSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsCreateSubmissionResponse}
     */
    ojsServiceCreateSubmission(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ojsServiceCreateSubmission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OjsCreateSubmissionResponse;
      return this.apiClient.callApi(
        '/api/v1/submissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceCreateTestCase operation.
     * @callback module:api/OjsServiceApi~ojsServiceCreateTestCaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsCreateTestCaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/OjsCreateTestCaseRequest} body 
     * @param {module:api/OjsServiceApi~ojsServiceCreateTestCaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsCreateTestCaseResponse}
     */
    ojsServiceCreateTestCase(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ojsServiceCreateTestCase");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OjsCreateTestCaseResponse;
      return this.apiClient.callApi(
        '/api/v1/test-cases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceDeleteProblem operation.
     * @callback module:api/OjsServiceApi~ojsServiceDeleteProblemCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OjsServiceApi~ojsServiceDeleteProblemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    ojsServiceDeleteProblem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ojsServiceDeleteProblem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/problems/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceDeleteSession operation.
     * @callback module:api/OjsServiceApi~ojsServiceDeleteSessionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/OjsServiceApi~ojsServiceDeleteSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    ojsServiceDeleteSession(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/sessions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceDeleteTestCase operation.
     * @callback module:api/OjsServiceApi~ojsServiceDeleteTestCaseCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OjsServiceApi~ojsServiceDeleteTestCaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    ojsServiceDeleteTestCase(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ojsServiceDeleteTestCase");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/test-cases/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceGetAccount operation.
     * @callback module:api/OjsServiceApi~ojsServiceGetAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsGetAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OjsServiceApi~ojsServiceGetAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsGetAccountResponse}
     */
    ojsServiceGetAccount(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ojsServiceGetAccount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OjsGetAccountResponse;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceGetAccountProblemSubmissionList operation.
     * @callback module:api/OjsServiceApi~ojsServiceGetAccountProblemSubmissionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsGetAccountProblemSubmissionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} accountId 
     * @param {String} problemId 
     * @param {Object} opts Optional parameters
     * @param {String} [offset] 
     * @param {String} [limit] 
     * @param {module:api/OjsServiceApi~ojsServiceGetAccountProblemSubmissionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsGetAccountProblemSubmissionListResponse}
     */
    ojsServiceGetAccountProblemSubmissionList(accountId, problemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling ojsServiceGetAccountProblemSubmissionList");
      }
      // verify the required parameter 'problemId' is set
      if (problemId === undefined || problemId === null) {
        throw new Error("Missing the required parameter 'problemId' when calling ojsServiceGetAccountProblemSubmissionList");
      }

      let pathParams = {
        'accountId': accountId,
        'problemId': problemId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OjsGetAccountProblemSubmissionListResponse;
      return this.apiClient.callApi(
        '/api/v1/accounts/{accountId}/problems/{problemId}/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceGetProblem operation.
     * @callback module:api/OjsServiceApi~ojsServiceGetProblemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsGetProblemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OjsServiceApi~ojsServiceGetProblemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsGetProblemResponse}
     */
    ojsServiceGetProblem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ojsServiceGetProblem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OjsGetProblemResponse;
      return this.apiClient.callApi(
        '/api/v1/problems/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceGetProblemList operation.
     * @callback module:api/OjsServiceApi~ojsServiceGetProblemListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsGetProblemListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [offset] 
     * @param {String} [limit] 
     * @param {module:api/OjsServiceApi~ojsServiceGetProblemListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsGetProblemListResponse}
     */
    ojsServiceGetProblemList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OjsGetProblemListResponse;
      return this.apiClient.callApi(
        '/api/v1/problems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceGetProblemSubmissionList operation.
     * @callback module:api/OjsServiceApi~ojsServiceGetProblemSubmissionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsGetProblemSubmissionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [offset] 
     * @param {String} [limit] 
     * @param {module:api/OjsServiceApi~ojsServiceGetProblemSubmissionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsGetProblemSubmissionListResponse}
     */
    ojsServiceGetProblemSubmissionList(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ojsServiceGetProblemSubmissionList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OjsGetProblemSubmissionListResponse;
      return this.apiClient.callApi(
        '/api/v1/problems/{id}/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceGetProblemTestCaseList operation.
     * @callback module:api/OjsServiceApi~ojsServiceGetProblemTestCaseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsGetProblemTestCaseListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [offset] 
     * @param {String} [limit] 
     * @param {module:api/OjsServiceApi~ojsServiceGetProblemTestCaseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsGetProblemTestCaseListResponse}
     */
    ojsServiceGetProblemTestCaseList(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ojsServiceGetProblemTestCaseList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OjsGetProblemTestCaseListResponse;
      return this.apiClient.callApi(
        '/api/v1/problems/{id}/test-cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceGetServerInfo operation.
     * @callback module:api/OjsServiceApi~ojsServiceGetServerInfoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/OjsServiceApi~ojsServiceGetServerInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    ojsServiceGetServerInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceGetSubmission operation.
     * @callback module:api/OjsServiceApi~ojsServiceGetSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsGetSubmissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OjsServiceApi~ojsServiceGetSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsGetSubmissionResponse}
     */
    ojsServiceGetSubmission(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ojsServiceGetSubmission");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OjsGetSubmissionResponse;
      return this.apiClient.callApi(
        '/api/v1/submissions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceGetSubmissionList operation.
     * @callback module:api/OjsServiceApi~ojsServiceGetSubmissionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsGetSubmissionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [offset] 
     * @param {String} [limit] 
     * @param {module:api/OjsServiceApi~ojsServiceGetSubmissionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsGetSubmissionListResponse}
     */
    ojsServiceGetSubmissionList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OjsGetSubmissionListResponse;
      return this.apiClient.callApi(
        '/api/v1/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceGetTestCase operation.
     * @callback module:api/OjsServiceApi~ojsServiceGetTestCaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsGetTestCaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/OjsServiceApi~ojsServiceGetTestCaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsGetTestCaseResponse}
     */
    ojsServiceGetTestCase(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ojsServiceGetTestCase");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OjsGetTestCaseResponse;
      return this.apiClient.callApi(
        '/api/v1/test-cases/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceUpdateProblem operation.
     * @callback module:api/OjsServiceApi~ojsServiceUpdateProblemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsUpdateProblemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/OjsServiceUpdateProblemBody} body 
     * @param {module:api/OjsServiceApi~ojsServiceUpdateProblemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsUpdateProblemResponse}
     */
    ojsServiceUpdateProblem(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ojsServiceUpdateProblem");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ojsServiceUpdateProblem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OjsUpdateProblemResponse;
      return this.apiClient.callApi(
        '/api/v1/problems/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ojsServiceUpdateTestCase operation.
     * @callback module:api/OjsServiceApi~ojsServiceUpdateTestCaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OjsUpdateTestCaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/OjsServiceUpdateTestCaseBody} body 
     * @param {module:api/OjsServiceApi~ojsServiceUpdateTestCaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OjsUpdateTestCaseResponse}
     */
    ojsServiceUpdateTestCase(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ojsServiceUpdateTestCase");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ojsServiceUpdateTestCase");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OjsUpdateTestCaseResponse;
      return this.apiClient.callApi(
        '/api/v1/test-cases/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
